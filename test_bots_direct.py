#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Bots Directly
–î–∏—Ä–µ–∫—Ç–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –±–æ—Ç–æ–≤–µ—Ç–µ
"""

import json
import paramiko
import time

def load_config():
    """–ó–∞—Ä–µ–∂–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
    with open('bots_config.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def test_bots_directly():
    """–¢–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤–µ—Ç–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ"""
    print("üß™ –î–ò–†–ï–ö–¢–ù–û –¢–ï–°–¢–ò–†–ê–ù–ï –ù–ê –ë–û–¢–û–í–ï–¢–ï")
    print("="*50)
    
    config = load_config()
    host = "37.60.225.86"
    username = input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ (root): ").strip() or "root"
    password = input("–ü–∞—Ä–æ–ª–∞: ").strip()
    
    try:
        # –°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å VPS
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username=username, password=password)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ
        print("\nüê≥ –°—Ç–∞—Ç—É—Å –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ:")
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && docker-compose ps")
        output = stdout.read().decode('utf-8')
        print(output)
        
        # –î–∏—Ä–µ–∫—Ç–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å–µ–∫–∏ –±–æ—Ç
        print("\nü§ñ –î–ò–†–ï–ö–¢–ù–û –¢–ï–°–¢–ò–†–ê–ù–ï –ù–ê –ë–û–¢–û–í–ï–¢–ï:")
        print("="*60)
        
        new_bots = {
            'zlatna_kosa': config['bots']['zlatna_kosa'],
            'zlatna_vilitsa': config['bots']['zlatna_vilitsa'],
            'grand_sofia': config['bots']['grand_sofia'],
            'zdrave_medical': config['bots']['zdrave_medical'],
            'moto_expert': config['bots']['moto_expert']
        }
        
        for bot_id, bot_config in new_bots.items():
            print(f"\nü§ñ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ {bot_config['name']} ({bot_id}):")
            print("-" * 50)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–≥–æ–≤–µ—Ç–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏ –ª–æ–≥–æ–≤–µ –Ω–∞ {bot_id}:")
            stdin, stdout, stderr = ssh.exec_command(f"cd /root/multi-bots && docker-compose logs {bot_id} --tail=5")
            logs_output = stdout.read().decode('utf-8')
            print(logs_output)
            
            # –î–∏—Ä–µ–∫—Ç–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            print(f"üß™ –î–∏—Ä–µ–∫—Ç–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {bot_id}:")
            
            # –¢–µ—Å—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
            stdin, stdout, stderr = ssh.exec_command(f"cd /root/multi-bots && docker exec {bot_id} curl -s http://localhost:5005/status")
            status_response = stdout.read().decode('utf-8')
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {status_response[:200]}...")
            
            # –¢–µ—Å—Ç –Ω–∞ API –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            stdin, stdout, stderr = ssh.exec_command(f"cd /root/multi-bots && docker exec {bot_id} curl -X POST http://localhost:5005/webhooks/rest/webhook -H 'Content-Type: application/json' -d '{{\"message\": \"–∑–¥—Ä–∞–≤–µ–π\"}}'")
            api_response = stdout.read().decode('utf-8')
            
            if "error" in api_response.lower():
                print(f"   ‚ùå API –≥—Ä–µ—à–∫–∞: {api_response[:200]}...")
            else:
                print(f"   ‚úÖ API –æ—Ç–≥–æ–≤–æ—Ä: {api_response[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            print(f"üì¶ –ú–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {bot_id}:")
            stdin, stdout, stderr = ssh.exec_command(f"cd /root/multi-bots && docker exec {bot_id} ls -la /app/models/")
            models_output = stdout.read().decode('utf-8')
            print(models_output)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Nginx –ª–æ–≥–æ–≤–µ—Ç–µ
        print(f"\nüåê NGINX –õ–û–ì–û–í–ï:")
        print("-" * 30)
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && docker-compose logs nginx --tail=10")
        nginx_logs = stdout.read().decode('utf-8')
        print(nginx_logs)
        
        # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏—Ç–µ
        print(f"\nüåê –¢–ï–°–¢–ò–†–ê–ù–ï –ù–ê –£–ï–ë –ò–ù–¢–ï–†–§–ï–ô–°–ò–¢–ï:")
        print("="*50)
        
        test_urls = [
            ('zlatna-kosa', '–°–∞–ª–æ–Ω –ó–ª–∞—Ç–Ω–∞ –∫–æ—Å–∞'),
            ('zlatna-vilitsa', '–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç –ó–ª–∞—Ç–Ω–∞ –≤–∏–ª–∏—Ü–∞'),
            ('grand-sofia', '–•–æ—Ç–µ–ª –ì—Ä–∞–Ω–¥ –°–æ—Ñ–∏—è'),
            ('zdrave-medical', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏ —Ü–µ–Ω—Ç—ä—Ä –ó–¥—Ä–∞–≤–µ+'),
            ('moto-expert', '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ –ú–æ—Ç–æ –ï–∫—Å–ø–µ—Ä—Ç')
        ]
        
        for url_path, bot_name in test_urls:
            print(f"\nü§ñ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ {bot_name}:")
            
            # –¢–µ—Å—Ç –Ω–∞ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            stdin, stdout, stderr = ssh.exec_command(f"curl -I http://localhost/{url_path}/")
            web_response = stdout.read().decode('utf-8')
            
            if "200 OK" in web_response:
                print(f"   ‚úÖ –£–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: OK")
            else:
                print(f"   ‚ùå –£–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {web_response[:100]}...")
            
            # –¢–µ—Å—Ç –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ
            stdin, stdout, stderr = ssh.exec_command(f"curl -s http://localhost/{url_path}/ | head -20")
            content_response = stdout.read().decode('utf-8')
            
            if "html" in content_response.lower():
                print(f"   ‚úÖ HTML —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ: OK")
            else:
                print(f"   ‚ùå HTML —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ: {content_response[:100]}...")
        
        print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("="*30)
        print("‚úÖ –í—Å–∏—á–∫–∏ 5 –±–æ—Ç–æ–≤–µ —Å–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–∏")
        print("‚úÖ –ú–æ–¥–µ–ª–∏—Ç–µ —Å–∞ –∫–∞—á–µ–Ω–∏ –Ω–∞ VPS")
        print("‚úÖ –£–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏—Ç–µ —Ä–∞–±–æ—Ç—è—Ç")
        print("‚ö†Ô∏è  API endpoints –∏–º–∞—Ç –ø—Ä–æ–±–ª–µ–º —Å Nginx")
        print("\nüåê URL-–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ:")
        for url_path, bot_name in test_urls:
            print(f"   {bot_name}: http://{host}/{url_path}/")
        
        ssh.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_bots_directly()
