#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fix HTML with Correct Paths
–ü–æ–ø—Ä–∞–≤—è–Ω–µ –Ω–∞ HTML —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ –ø—ä—Ç–∏—â–∞
"""

import json
import paramiko
import time
import os

def load_config():
    """–ó–∞—Ä–µ–∂–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
    with open('bots_config.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def create_bot_html(bot_name, bot_description, welcome_message):
    """–°—ä–∑–¥–∞–≤–∞ HTML –∑–∞ –±–æ—Ç–∞"""
    return f"""<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{bot_name}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }}
        
        .chat-container {{
            width: 90%;
            max-width: 800px;
            height: 80vh;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
        }}
        
        .header h1 {{
            font-size: 24px;
            margin-bottom: 5px;
        }}
        
        .header p {{
            font-size: 14px;
            opacity: 0.9;
        }}
        
        .chat-status {{
            background: #4CAF50;
            color: white;
            padding: 10px;
            text-align: center;
            font-size: 14px;
        }}
        
        .chat-messages {{
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }}
        
        .message {{
            margin-bottom: 15px;
            display: flex;
            align-items: flex-start;
        }}
        
        .message.bot {{
            justify-content: flex-start;
        }}
        
        .message.user {{
            justify-content: flex-end;
        }}
        
        .message-content {{
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            word-wrap: break-word;
        }}
        
        .message.bot .message-content {{
            background: #e3f2fd;
            color: #1565c0;
        }}
        
        .message.user .message-content {{
            background: #667eea;
            color: white;
        }}
        
        .chat-input {{
            padding: 20px;
            background: white;
            border-top: 1px solid #e0e0e0;
            display: flex;
            gap: 10px;
        }}
        
        .chat-input input {{
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e0e0e0;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
        }}
        
        .chat-input input:focus {{
            border-color: #667eea;
        }}
        
        .chat-input button {{
            padding: 12px 24px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        }}
        
        .chat-input button:hover {{
            background: #45a049;
        }}
        
        .quick-replies {{
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }}
        
        .quick-reply {{
            padding: 8px 16px;
            background: #e3f2fd;
            color: #1565c0;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }}
        
        .quick-reply:hover {{
            background: #bbdefb;
        }}
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="header">
            <h1>{bot_name}</h1>
            <p>{bot_description}</p>
        </div>
        
        <div class="chat-status">
            –ß–∞—Ç —Å {bot_name}
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="message bot">
                <div class="message-content">
                    {welcome_message}
                </div>
            </div>
        </div>
        
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="–ù–∞–ø–∏—à–µ—Ç–µ –≤–∞—à–µ—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏–µ..." onkeypress="handleKeyPress(event)">
            <button onclick="sendMessage()">–ò–∑–ø—Ä–∞—Ç–∏</button>
        </div>
        
        <div class="quick-replies" id="quickReplies">
            <button class="quick-reply" onclick="sendQuickReply('–∑–¥—Ä–∞–≤–µ–π')">–∑–¥—Ä–∞–≤–µ–π</button>
            <button class="quick-reply" onclick="sendQuickReply('—Ü–µ–Ω–∏')">—Ü–µ–Ω–∏</button>
            <button class="quick-reply" onclick="sendQuickReply('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')">–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</button>
        </div>
    </div>

    <script>
        const API_URL = window.location.origin + '/webhooks/rest/webhook';
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        
        function addMessage(content, isUser = false) {{
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${{isUser ? 'user' : 'bot'}}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.textContent = content;
            
            messageDiv.appendChild(contentDiv);
            chatMessages.appendChild(messageDiv);
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }}
        
        function sendMessage() {{
            const message = messageInput.value.trim();
            if (!message) return;
            
            addMessage(message, true);
            messageInput.value = '';
            
            fetch(API_URL, {{
                method: 'POST',
                headers: {{
                    'Content-Type': 'application/json',
                }},
                body: JSON.stringify({{
                    message: message
                }})
            }})
            .then(response => response.json())
            .then(data => {{
                if (data && data.length > 0) {{
                    data.forEach(response => {{
                        if (response.text) {{
                            addMessage(response.text);
                        }}
                    }});
                }}
            }})
            .catch(error => {{
                console.error('Error:', error);
                addMessage('–°—ä–∂–∞–ª—è–≤–∞–º, –∏–º–∞ –ø—Ä–æ–±–ª–µ–º —Å –≤—Ä—ä–∑–∫–∞—Ç–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.');
            }});
        }}
        
        function sendQuickReply(text) {{
            messageInput.value = text;
            sendMessage();
        }}
        
        function handleKeyPress(event) {{
            if (event.key === 'Enter') {{
                sendMessage();
            }}
        }}
        
        // Auto-scroll to bottom when window gains focus
        window.addEventListener('focus', () => {{
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }});
        
        // Auto-scroll when tab becomes visible
        document.addEventListener('visibilitychange', () => {{
            if (!document.hidden) {{
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }}
        }});
    </script>
</body>
</html>"""

def fix_html_with_correct_paths():
    """–ü–æ–ø—Ä–∞–≤—è HTML —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ –ø—ä—Ç–∏—â–∞"""
    print("üîß –ü–û–ü–†–ê–í–Ø–ù–ï –ù–ê HTML –° –ü–†–ê–í–ò–õ–ù–ò–¢–ï –ü–™–¢–ò–©–ê")
    print("="*50)
    
    config = load_config()
    host = "37.60.225.86"
    username = input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ (root): ").strip() or "root"
    password = input("–ü–∞—Ä–æ–ª–∞: ").strip()
    
    try:
        # –°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å VPS
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username=username, password=password)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ!")
        
        # –°–ø–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ
        print("\nüõë –°–ø–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ...")
        ssh.exec_command("cd /root/multi-bots && docker-compose down")
        time.sleep(5)
        
        # –ü—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ –ø—ä—Ç–∏—â–∞ –∫—ä–º –±–æ—Ç–æ–≤–µ—Ç–µ
        bot_paths = {
            'zlatna_kosa': 'zlatna_kosa_salon',
            'zlatna_vilitsa': 'zlatna_vilitsa_restaurant',
            'grand_sofia': 'grand_sofia_hotel',
            'zdrave_medical': 'zdrave_medical_center',
            'moto_expert': 'moto_expert_autoservice'
        }
        
        bot_configs = {
            'zlatna_kosa': {
                'name': '–°–∞–ª–æ–Ω "–ó–ª–∞—Ç–Ω–∞ –∫–æ—Å–∞"',
                'description': '–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∏ –∫–æ–∑–º–µ—Ç–∏—á–Ω–∏ —É—Å–ª—É–≥–∏',
                'welcome': '–ü—Ä–∏–≤–µ—Ç! ‚ú® –î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ —Å–∞–ª–æ–Ω "–ó–ª–∞—Ç–Ω–∞ –∫–æ—Å–∞"! –ö–∞–∫ –º–æ–≥–∞ –¥–∞ –≤–∏ –ø–æ–º–æ–≥–Ω–∞ –¥–Ω–µ—Å?'
            },
            'zlatna_vilitsa': {
                'name': '–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç "–ó–ª–∞—Ç–Ω–∞ –≤–∏–ª–∏—Ü–∞"',
                'description': '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –∫—É—Ö–Ω—è',
                'welcome': '–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç "–ó–ª–∞—Ç–Ω–∞ –≤–∏–ª–∏—Ü–∞"! üçΩÔ∏è –ö–∞–∫ –º–æ–≥–∞ –¥–∞ –≤–∏ –ø–æ–º–æ–≥–Ω–∞ –¥–Ω–µ—Å?'
            },
            'grand_sofia': {
                'name': '–•–æ—Ç–µ–ª "–ì—Ä–∞–Ω–¥ –°–æ—Ñ–∏—è"',
                'description': '–õ—É–∫—Å–æ–∑–Ω–æ –Ω–∞—Å—Ç–∞–Ω—è–≤–∞–Ω–µ –≤ —Ü–µ–Ω—Ç—ä—Ä–∞ –Ω–∞ –°–æ—Ñ–∏—è',
                'welcome': '–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ —Ö–æ—Ç–µ–ª "–ì—Ä–∞–Ω–¥ –°–æ—Ñ–∏—è"! üè® –ö–∞–∫ –º–æ–≥–∞ –¥–∞ –≤–∏ –ø–æ–º–æ–≥–Ω–∞ –¥–Ω–µ—Å?'
            },
            'zdrave_medical': {
                'name': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏ —Ü–µ–Ω—Ç—ä—Ä "–ó–¥—Ä–∞–≤–µ+"',
                'description': '–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞ –≥—Ä–∏–∂–∞',
                'welcome': '–ó–¥—Ä–∞–≤–µ–π—Ç–µ! üëã –ê–∑ —Å—ä–º –¥-—Ä –ú–∞—Ä–∏—è, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª–µ–Ω –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ö–∞–∫ –º–æ–≥–∞ –¥–∞ –≤–∏ –ø–æ–º–æ–≥–Ω–∞?'
            },
            'moto_expert': {
                'name': '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ "–ú–æ—Ç–æ –ï–∫—Å–ø–µ—Ä—Ç"',
                'description': '–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–Ω–∏ —É—Å–ª—É–≥–∏',
                'welcome': '–ó–¥—Ä–∞–≤–µ–π—Ç–µ! üëã –ê–∑ —Å—ä–º –≤–∞—à–∏—è—Ç –≤–∏—Ä—Ç—É–∞–ª–µ–Ω –∞–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ö–∞–∫ –º–æ–≥–∞ –¥–∞ –≤–∏ –ø–æ–º–æ–≥–Ω–∞?'
            }
        }
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
        temp_files = []
        for bot_id, bot_config in bot_configs.items():
            print(f"\nü§ñ –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ HTML –∑–∞ {bot_config['name']}...")
            
            html_content = create_bot_html(
                bot_config['name'],
                bot_config['description'],
                bot_config['welcome']
            )
            
            # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –≤—Ä–µ–º–µ–Ω–µ–Ω —Ñ–∞–π–ª
            temp_file = f"temp_{bot_id}_index.html"
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            temp_files.append(temp_file)
            print(f"   ‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω –≤—Ä–µ–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {temp_file}")
        
        # –ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ
        print("\nüì§ –ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ...")
        sftp = ssh.open_sftp()
        
        for bot_id, bot_config in bot_configs.items():
            temp_file = f"temp_{bot_id}_index.html"
            bot_path = bot_paths[bot_id]
            remote_web_dir = f"/root/multi-bots/bots/{bot_path}/web"
            
            print(f"\nüì§ –ö–∞—á–≤–∞–Ω–µ –Ω–∞ {bot_config['name']}...")
            
            # –ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞
            sftp.put(temp_file, f"{remote_web_dir}/index.html")
            print(f"   ‚úÖ –§–∞–π–ª—ä—Ç –µ –∫–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        sftp.close()
        
        # –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ
        print("\nüßπ –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ...")
        for temp_file in temp_files:
            try:
                os.remove(temp_file)
                print(f"   ‚úÖ –ò–∑—Ç—Ä–∏—Ç: {temp_file}")
            except:
                pass
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ
        print("\nüöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ...")
        ssh.exec_command("cd /root/multi-bots && docker-compose up -d")
        
        # –ò–∑—á–∞–∫–≤–∞–Ω–µ –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
        print("‚è≥ –ò–∑—á–∞–∫–≤–∞–Ω–µ –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ...")
        time.sleep(20)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞—á–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ:")
        
        for bot_id, bot_config in bot_configs.items():
            print(f"\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ {bot_config['name']}:")
            
            bot_path = bot_paths[bot_id]
            remote_web_dir = f"/root/multi-bots/bots/{bot_path}/web"
            stdin, stdout, stderr = ssh.exec_command(f"head -5 {remote_web_dir}/index.html")
            file_content = stdout.read().decode('utf-8')
            
            if bot_config['name'] in file_content:
                print(f"   ‚úÖ –§–∞–π–ª—ä—Ç —Å—ä–¥—ä—Ä–∂–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ—Ç–æ –∑–∞–≥–ª–∞–≤–∏–µ")
            else:
                print(f"   ‚ùå –§–∞–π–ª—ä—Ç –ù–ï —Å—ä–¥—ä—Ä–∂–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ—Ç–æ –∑–∞–≥–ª–∞–≤–∏–µ")
                print(f"   üìÑ –ü—ä—Ä–≤–∏—Ç–µ 5 —Ä–µ–¥–∞: {file_content[:200]}...")
        
        print(f"\nüéâ –ö–∞—á–≤–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ!")
        print(f"\nüåê URL-–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ:")
        for bot_id, bot_config in bot_configs.items():
            url_path = bot_id.replace("_", "-")
            print(f"   {bot_config['name']}: http://{host}/{url_path}/")
        
        ssh.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        return False

if __name__ == "__main__":
    fix_html_with_correct_paths()
