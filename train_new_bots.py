#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Train New Bots Locally
–¢—Ä–µ–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏—Ç–µ –±–æ—Ç–æ–≤–µ –ª–æ–∫–∞–ª–Ω–æ
"""

import os
import subprocess
import json
import time

def load_config():
    """–ó–∞—Ä–µ–∂–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
    with open('bots_config.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def train_bot(bot_id, bot_config):
    """–¢—Ä–µ–Ω–∏—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –±–æ—Ç"""
    print(f"\nü§ñ –¢—Ä–µ–Ω–∏—Ä–∞–Ω–µ –Ω–∞ {bot_config['name']}...")
    print("="*50)
    
    rasa_path = bot_config['path']
    print(f"üìç –ü—ä—Ç: {rasa_path}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    if not os.path.exists(rasa_path):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ {rasa_path} –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ
    required_files = ['config.yml', 'domain.yml', 'data/nlu.yml', 'data/stories.yml']
    missing_files = []
    
    for file in required_files:
        file_path = os.path.join(rasa_path, file)
        if not os.path.exists(file_path):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –õ–∏–ø—Å–≤–∞—Ç —Ñ–∞–π–ª–æ–≤–µ: {', '.join(missing_files)}")
        return False
    
    try:
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ models –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        models_dir = os.path.join(rasa_path, 'models')
        if not os.path.exists(models_dir):
            os.makedirs(models_dir)
            print(f"üìÅ –°—ä–∑–¥–∞–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {models_dir}")
        
        # –¢—Ä–µ–Ω–∏—Ä–∞–Ω–µ —Å Docker
        print("üìö –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–∞–Ω–µ —Å Docker...")
        cmd = [
            'docker', 'run', '--rm', 
            '-v', f'{os.path.abspath(rasa_path)}:/app',
            'rasa/rasa:3.6.21', 'train', '--force'
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=rasa_path)
        
        if result.returncode == 0:
            print("‚úÖ –¢—Ä–µ–Ω–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏—è –º–æ–¥–µ–ª
            models = [f for f in os.listdir(models_dir) if f.endswith('.tar.gz')]
            if models:
                latest_model = max(models, key=lambda x: os.path.getctime(os.path.join(models_dir, x)))
                print(f"üì¶ –°—ä–∑–¥–∞–¥–µ–Ω –º–æ–¥–µ–ª: {latest_model}")
                return True
            else:
                print("‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω —Å—ä–∑–¥–∞–¥–µ–Ω –º–æ–¥–µ–ª!")
                return False
        else:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–∞–Ω–µ:")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        return False

def train_all_new_bots():
    """–¢—Ä–µ–Ω–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –Ω–æ–≤–∏ –±–æ—Ç–æ–≤–µ"""
    print("üöÄ –¢–†–ï–ù–ò–†–ê–ù–ï –ù–ê –í–°–ò–ß–ö–ò –ù–û–í–ò –ë–û–¢–û–í–ï")
    print("="*60)
    
    config = load_config()
    
    # –°–ø–∏—Å—ä–∫ –Ω–∞ –Ω–æ–≤–∏—Ç–µ –±–æ—Ç–æ–≤–µ (–±–µ–∑ dragonforged_v2)
    new_bots = {
        'zlatna_kosa': config['bots']['zlatna_kosa'],
        'zlatna_vilitsa': config['bots']['zlatna_vilitsa'],
        'grand_sofia': config['bots']['grand_sofia'],
        'zdrave_medical': config['bots']['zdrave_medical'],
        'moto_expert': config['bots']['moto_expert']
    }
    
    success_count = 0
    failed_bots = []
    
    for bot_id, bot_config in new_bots.items():
        if train_bot(bot_id, bot_config):
            success_count += 1
        else:
            failed_bots.append(bot_config['name'])
    
    print(f"\nüìä –†–ï–ó–£–õ–¢–ê–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–∞–Ω–∏: {success_count}/{len(new_bots)}")
    
    if failed_bots:
        print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∏: {', '.join(failed_bots)}")
    
    if success_count == len(new_bots):
        print("\nüéâ –í—Å–∏—á–∫–∏ –±–æ—Ç–æ–≤–µ —Å–∞ —Ç—Ä–µ–Ω–∏—Ä–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüì§ –°–ª–µ–¥–≤–∞—â–∞ —Å—Ç—ä–ø–∫–∞: –ö–∞—á–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ –Ω–∞ VPS")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {len(failed_bots)} –±–æ—Ç–∞ –Ω–µ —Å–∞ —Ç—Ä–µ–Ω–∏—Ä–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ!")
        return False

if __name__ == "__main__":
    train_all_new_bots()
