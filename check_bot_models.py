#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Check Bot Models on VPS
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ –Ω–∞ –±–æ—Ç–æ–≤–µ—Ç–µ –Ω–∞ VPS
"""

import json
import paramiko
import time

def load_config():
    """–ó–∞—Ä–µ–∂–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
    with open('bots_config.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def check_bot_models():
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –º–æ–¥–µ–ª–∏—Ç–µ –Ω–∞ –±–æ—Ç–æ–≤–µ—Ç–µ –Ω–∞ VPS"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–û–î–ï–õ–ò–¢–ï –ù–ê –ë–û–¢–û–í–ï–¢–ï")
    print("="*50)
    
    config = load_config()
    host = "37.60.225.86"
    username = input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ (root): ").strip() or "root"
    password = input("–ü–∞—Ä–æ–ª–∞: ").strip()
    
    try:
        # –°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å VPS
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username=username, password=password)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ
        print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ...")
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && docker-compose ps")
        output = stdout.read().decode('utf-8')
        print(output)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ –∑–∞ –≤—Å–µ–∫–∏ –±–æ—Ç
        print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–û–î–ï–õ–ò–¢–ï:")
        print("="*60)
        
        new_bots = {
            'zlatna_kosa': config['bots']['zlatna_kosa'],
            'zlatna_vilitsa': config['bots']['zlatna_vilitsa'],
            'grand_sofia': config['bots']['grand_sofia'],
            'zdrave_medical': config['bots']['zdrave_medical'],
            'moto_expert': config['bots']['moto_expert']
        }
        
        for bot_id, bot_config in new_bots.items():
            print(f"\nü§ñ {bot_config['name']}:")
            print("-" * 40)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞
            remote_models_dir = f"/root/multi-bots/{bot_config['path']}/models"
            stdin, stdout, stderr = ssh.exec_command(f"ls -la {remote_models_dir}")
            models_output = stdout.read().decode('utf-8')
            
            if "No such file or directory" in models_output:
                print(f"   ‚ùå –ù—è–º–∞ models –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è!")
                continue
            
            print(f"   üìÅ –ú–æ–¥–µ–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞:")
            for line in models_output.split('\n'):
                if '.tar.gz' in line:
                    print(f"      üì¶ {line.split()[-1]}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–≥–æ–≤–µ—Ç–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            print(f"   üìã –õ–æ–≥–æ–≤–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {bot_id}:")
            stdin, stdout, stderr = ssh.exec_command(f"cd /root/multi-bots && docker-compose logs {bot_id} --tail=10")
            logs_output = stdout.read().decode('utf-8')
            
            # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª
            model_loaded = False
            for line in logs_output.split('\n'):
                if 'model' in line.lower() and ('loaded' in line.lower() or 'loading' in line.lower()):
                    print(f"      üîç {line.strip()}")
                    model_loaded = True
                elif 'error' in line.lower():
                    print(f"      ‚ùå {line.strip()}")
            
            if not model_loaded:
                print(f"      ‚ö†Ô∏è  –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª")
            
            # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ API
            print(f"   üß™ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ API...")
            url_path = bot_id.replace("_", "-")
            test_url = f"http://localhost/{url_path}/webhooks/rest/webhook"
            
            stdin, stdout, stderr = ssh.exec_command(f"curl -X POST {test_url} -H 'Content-Type: application/json' -d '{{\"message\": \"–∑–¥—Ä–∞–≤–µ–π\"}}'")
            api_response = stdout.read().decode('utf-8')
            
            if "405 Not Allowed" in api_response:
                print(f"      ‚ö†Ô∏è  API –≤—Ä—ä—â–∞ 405 (–≤–µ—Ä–æ—è—Ç–Ω–æ Nginx –ø—Ä–æ–±–ª–µ–º)")
            elif "error" in api_response.lower():
                print(f"      ‚ùå API –≥—Ä–µ—à–∫–∞: {api_response[:100]}...")
            else:
                print(f"      ‚úÖ API –æ—Ç–≥–æ–≤–æ—Ä: {api_response[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        print(f"\nüåê –ü–†–û–í–ï–†–ö–ê –ù–ê NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø–¢–ê:")
        print("-" * 50)
        
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && cat nginx.conf")
        nginx_config = stdout.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –±–æ—Ç–æ–≤–µ —Å–∞ –≤ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        for bot_id in new_bots.keys():
            if f"location /{bot_id.replace('_', '-')}/" in nginx_config:
                print(f"   ‚úÖ {bot_id} - –Ω–∞–º–µ—Ä–µ–Ω –≤ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞")
            else:
                print(f"   ‚ùå {bot_id} - –ù–ï –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ Nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        print(f"\nüìä –°–¢–ê–¢–£–° –ù–ê NGINX:")
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && docker-compose logs nginx --tail=5")
        nginx_logs = stdout.read().decode('utf-8')
        print(nginx_logs)
        
        print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("="*30)
        print("‚úÖ –í—Å–∏—á–∫–∏ 5 –±–æ—Ç–æ–≤–µ —Å–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–∏")
        print("‚úÖ –ú–æ–¥–µ–ª–∏—Ç–µ —Å–∞ –∫–∞—á–µ–Ω–∏ –Ω–∞ VPS")
        print("‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –ø—Ä–∞–≤–∏–ª–Ω–∞")
        print("\nüåê URL-–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ:")
        for bot_id, bot_config in new_bots.items():
            url_path = bot_id.replace("_", "-")
            print(f"   {bot_config['name']}: http://{host}/{url_path}/")
        
        ssh.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        return False

if __name__ == "__main__":
    check_bot_models()
