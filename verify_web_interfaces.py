#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verify Web Interfaces
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏—Ç–µ
"""

import json
import paramiko
import time

def load_config():
    """–ó–∞—Ä–µ–∂–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
    with open('bots_config.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def verify_web_interfaces():
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏—Ç–µ –Ω–∞ –±–æ—Ç–æ–≤–µ—Ç–µ"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê –£–ï–ë –ò–ù–¢–ï–†–§–ï–ô–°–ò–¢–ï")
    print("="*50)
    
    config = load_config()
    host = "37.60.225.86"
    username = input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ (root): ").strip() or "root"
    password = input("–ü–∞—Ä–æ–ª–∞: ").strip()
    
    try:
        # –°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å VPS
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username=username, password=password)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ
        print("\nüê≥ –°—Ç–∞—Ç—É—Å –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ:")
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && docker-compose ps")
        output = stdout.read().decode('utf-8')
        print(output)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏—Ç–µ
        print("\nüåê –ü–†–û–í–ï–†–ö–ê –ù–ê –£–ï–ë –ò–ù–¢–ï–†–§–ï–ô–°–ò–¢–ï:")
        print("="*60)
        
        bot_configs = {
            'zlatna_kosa': {
                'name': '–°–∞–ª–æ–Ω "–ó–ª–∞—Ç–Ω–∞ –∫–æ—Å–∞"',
                'expected_title': '–°–∞–ª–æ–Ω "–ó–ª–∞—Ç–Ω–∞ –∫–æ—Å–∞"',
                'expected_welcome': '—Å–∞–ª–æ–Ω "–ó–ª–∞—Ç–Ω–∞ –∫–æ—Å–∞"'
            },
            'zlatna_vilitsa': {
                'name': '–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç "–ó–ª–∞—Ç–Ω–∞ –≤–∏–ª–∏—Ü–∞"',
                'expected_title': '–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç "–ó–ª–∞—Ç–Ω–∞ –≤–∏–ª–∏—Ü–∞"',
                'expected_welcome': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç "–ó–ª–∞—Ç–Ω–∞ –≤–∏–ª–∏—Ü–∞"'
            },
            'grand_sofia': {
                'name': '–•–æ—Ç–µ–ª "–ì—Ä–∞–Ω–¥ –°–æ—Ñ–∏—è"',
                'expected_title': '–•–æ—Ç–µ–ª "–ì—Ä–∞–Ω–¥ –°–æ—Ñ–∏—è"',
                'expected_welcome': '—Ö–æ—Ç–µ–ª "–ì—Ä–∞–Ω–¥ –°–æ—Ñ–∏—è"'
            },
            'zdrave_medical': {
                'name': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏ —Ü–µ–Ω—Ç—ä—Ä "–ó–¥—Ä–∞–≤–µ+"',
                'expected_title': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏ —Ü–µ–Ω—Ç—ä—Ä "–ó–¥—Ä–∞–≤–µ+"',
                'expected_welcome': '–¥-—Ä –ú–∞—Ä–∏—è'
            },
            'moto_expert': {
                'name': '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ "–ú–æ—Ç–æ –ï–∫—Å–ø–µ—Ä—Ç"',
                'expected_title': '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ "–ú–æ—Ç–æ –ï–∫—Å–ø–µ—Ä—Ç"',
                'expected_welcome': '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ –∞—Å–∏—Å—Ç–µ–Ω—Ç'
            }
        }
        
        all_passed = True
        
        for bot_id, bot_config in bot_configs.items():
            print(f"\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ {bot_config['name']}:")
            print("-" * 50)
            
            url_path = bot_id.replace("_", "-")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            stdin, stdout, stderr = ssh.exec_command(f"curl -s http://localhost/{url_path}/")
            content_response = stdout.read().decode('utf-8')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ
            if bot_config['expected_title'] in content_response:
                print(f"   ‚úÖ –ó–∞–≥–ª–∞–≤–∏–µ: OK")
            else:
                print(f"   ‚ùå –ó–∞–≥–ª–∞–≤–∏–µ: –ù–ï –µ –Ω–∞–º–µ—Ä–µ–Ω–æ '{bot_config['expected_title']}'")
                all_passed = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–æ—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
            if bot_config['expected_welcome'] in content_response:
                print(f"   ‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: OK")
            else:
                print(f"   ‚ùå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: –ù–ï –µ –Ω–∞–º–µ—Ä–µ–Ω–æ '{bot_config['expected_welcome']}'")
                all_passed = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –Ω—è–º–∞ DragonForged —Ç–µ–∫—Å—Ç–æ–≤–µ
            if 'DragonForgedDreams' in content_response:
                print(f"   ‚ùå DragonForged —Ç–µ–∫—Å—Ç: –í–°–ï –û–©–ï –°–™–©–ï–°–¢–í–£–í–ê!")
                all_passed = False
            else:
                print(f"   ‚úÖ DragonForged —Ç–µ–∫—Å—Ç: –ü—Ä–µ–º–∞—Ö–Ω–∞—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
            stdin, stdout, stderr = ssh.exec_command(f"curl -I http://localhost/{url_path}/")
            status_response = stdout.read().decode('utf-8')
            
            if "200 OK" in status_response:
                print(f"   ‚úÖ HTTP —Å—Ç–∞—Ç—É—Å: 200 OK")
            else:
                print(f"   ‚ùå HTTP —Å—Ç–∞—Ç—É—Å: {status_response[:100]}...")
                all_passed = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ API endpoints
        print(f"\nüß™ –ü–†–û–í–ï–†–ö–ê –ù–ê API ENDPOINTS:")
        print("="*50)
        
        for bot_id, bot_config in bot_configs.items():
            url_path = bot_id.replace("_", "-")
            print(f"\nü§ñ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ API –∑–∞ {bot_config['name']}:")
            
            # –¢–µ—Å—Ç –Ω–∞ API –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            stdin, stdout, stderr = ssh.exec_command(f"cd /root/multi-bots && docker exec {bot_id} curl -X POST http://localhost:5005/webhooks/rest/webhook -H 'Content-Type: application/json' -d '{{\"message\": \"–∑–¥—Ä–∞–≤–µ–π\"}}'")
            api_response = stdout.read().decode('utf-8')
            
            if "error" in api_response.lower():
                print(f"   ‚ùå API –≥—Ä–µ—à–∫–∞: {api_response[:200]}...")
                all_passed = False
            else:
                print(f"   ‚úÖ API –æ—Ç–≥–æ–≤–æ—Ä: {api_response[:200]}...")
        
        print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("="*30)
        
        if all_passed:
            print("‚úÖ –í—Å–∏—á–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏–Ω–∞—Ö–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –£–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏—Ç–µ —Å–∞ –ø–æ–ø—Ä–∞–≤–µ–Ω–∏")
            print("‚úÖ –ë–æ—Ç–æ–≤–µ—Ç–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ –º–æ–¥–µ–ª–∏")
            print("‚úÖ API endpoints —Ä–∞–±–æ—Ç—è—Ç")
        else:
            print("‚ùå –ù—è–∫–æ–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞—Ö–∞!")
            print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –æ—Ç–Ω–æ–≤–æ —É–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏—Ç–µ")
        
        print(f"\nüåê URL-–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ:")
        for bot_id, bot_config in bot_configs.items():
            url_path = bot_id.replace("_", "-")
            print(f"   {bot_config['name']}: http://{host}/{url_path}/")
        
        ssh.close()
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        return False

if __name__ == "__main__":
    verify_web_interfaces()
