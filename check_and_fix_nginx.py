#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Check and Fix Nginx Configuration
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ø—Ä–∞–≤—è–Ω–µ –Ω–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
"""

import json
import paramiko
import time

def load_config():
    """–ó–∞—Ä–µ–∂–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
    with open('bots_config.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def check_and_fix_nginx():
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –∏ –ø–æ–ø—Ä–∞–≤—è Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –ò –ü–û–ü–†–ê–í–Ø–ù–ï –ù–ê NGINX")
    print("="*50)
    
    config = load_config()
    host = "37.60.225.86"
    username = input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ (root): ").strip() or "root"
    password = input("–ü–∞—Ä–æ–ª–∞: ").strip()
    
    try:
        # –°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å VPS
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username=username, password=password)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ
        print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏—Ç–µ...")
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && docker-compose ps")
        output = stdout.read().decode('utf-8')
        print(output)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞...")
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && cat nginx.conf")
        nginx_config = stdout.read().decode('utf-8')
        print("–¢–µ–∫—É—â–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(nginx_config)
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print("\nüîß –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è...")
        new_nginx_config = create_correct_nginx_config(config)
        
        # –ö–∞—á–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        sftp = ssh.open_sftp()
        with open("nginx-fixed.conf", "w") as f:
            f.write(new_nginx_config)
        
        sftp.put("nginx-fixed.conf", "/root/multi-bots/nginx.conf")
        sftp.close()
        
        # –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        print("\nüîÑ –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        ssh.exec_command("cd /root/multi-bots && docker-compose restart nginx")
        
        # –ò–∑—á–∞–∫–≤–∞–Ω–µ –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
        print("‚è≥ –ò–∑—á–∞–∫–≤–∞–Ω–µ –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ...")
        time.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Nginx –ª–æ–≥–æ–≤–µ—Ç–µ
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Nginx –ª–æ–≥–æ–≤–µ—Ç–µ...")
        stdin, stdout, stderr = ssh.exec_command("cd /root/multi-bots && docker-compose logs nginx --tail=20")
        logs = stdout.read().decode('utf-8')
        print(logs)
        
        # –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ URL-–∏—Ç–µ
        print("\nüß™ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ URL-–∏—Ç–µ...")
        for bot_id, bot_config in config['bots'].items():
            if bot_id != "dragonforged_v2":
                url_path = bot_id.replace("_", "-")
                test_url = f"http://localhost/{url_path}/"
                print(f"–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ {bot_config['name']}: {test_url}")
                
                stdin, stdout, stderr = ssh.exec_command(f"curl -I {test_url}")
                response = stdout.read().decode('utf-8')
                print(f"–û—Ç–≥–æ–≤–æ—Ä: {response[:200]}...")
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∞!")
        print("\nüìã –ü—Ä–∞–≤–∏–ª–Ω–∏ URL-–∏:")
        for bot_id, bot_config in config['bots'].items():
            if bot_id != "dragonforged_v2":
                url_path = bot_id.replace("_", "-")
                print(f"   {bot_config['name']}: http://{host}/{url_path}/")
        
        ssh.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        return False

def create_correct_nginx_config(config):
    """–°—ä–∑–¥–∞–≤–∞ –ø—Ä–∞–≤–∏–ª–Ω–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    nginx_config = """events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Upstream –±–ª–æ–∫–æ–≤–µ –∑–∞ –≤—Å–µ–∫–∏ –±–æ—Ç
"""
    
    # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ upstream –±–ª–æ–∫–æ–≤–µ
    for bot_id, bot_config in config['bots'].items():
        nginx_config += f"""    upstream {bot_id} {{
        server {bot_id}:5005;
    }}
"""
    
    nginx_config += """
    server {
        listen 80;
        server_name 37.60.225.86;
        
        # Location –±–ª–æ–∫–æ–≤–µ –∑–∞ –≤—Å–µ–∫–∏ –±–æ—Ç
"""
    
    # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ location –±–ª–æ–∫–æ–≤–µ
    for bot_id, bot_config in config['bots'].items():
        url_path = bot_id.replace("_", "-")
        nginx_config += f"""        # {bot_config['name']}
        location /{url_path}/ {{
            proxy_pass http://{bot_id}/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300;
            proxy_connect_timeout 300;
        }}
"""
    
    nginx_config += """
        # –°—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
        location / {
            root /var/www/html;
            index index.html;
            try_files $uri $uri/ =404;
        }
        
        # Health check
        location /health {
            return 200 "OK";
            add_header Content-Type text/plain;
        }
    }
}
"""
    
    return nginx_config

if __name__ == "__main__":
    check_and_fix_nginx()
